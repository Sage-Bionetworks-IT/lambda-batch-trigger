AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  A lambda to trigger batch jobs

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Parameters:
  JobName:
    Description: >
      The batch job name
    Type: String
  JobQueue:
    Description: >
      The ARN or name of the batch job queue
    Type: String
    ConstraintDescription: Must be a job queue ARN or name
  JobDefinition:
    Description: >
      The ARN of the job definition
    Type: String
    ConstraintDescription: Must be an ARN of the batch job
  EnableSchedule:
    Description: >
      true to run on a schedule, false to disable. If enabled a valid Schedule must be provided
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  Schedule:
    Description: >
      Schedule to execute the docker, can be a rate or a cron schedule. Format at
      https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
    Type: String
    Default: cron(0 09 ? * MON *)  # Run every Monday at 9am
    ConstraintDescription: "Use schedule format: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"

Resources:
  SubmitJobFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: .
      Handler: submit_job/app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          JOB_NAME: !Ref JobName
          JOB_QUEUE: !Ref JobQueue
          JOB_DEFINITION: !Ref JobDefinition
      Events:
        RecurringSchedule:
          Type: Schedule
          Properties:
            Schedule: !Ref Schedule
            Enabled: !Ref EnableSchedule
        SubmitJob:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /submitjob
            Method: get

  FunctionRole:   # execute lambda function with this role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceEventTargetRole

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SubmitJobApi:
    Description: "API Gateway endpoint URL for Prod stage for Submit Job function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/submitjob/"
  SubmitJobFunctionArn:
    Description: "Submit Job Lambda Function ARN"
    Value: !GetAtt SubmitJobFunction.Arn
  SubmitJobFunctionRoleArn:
    Description: "Implicit IAM Role created for Submit Job function"
    Value: !GetAtt FunctionRole.Arn
